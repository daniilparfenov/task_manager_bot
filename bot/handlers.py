import logging
from datetime import datetime, timedelta

import pytz
import requests
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import TASK_SERVICE_URL
from models import TaskModel

router = Router()
MOSCOW_TZ = pytz.timezone("Europe/Moscow")


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è."
    )


@router.message(Command("tasks"))
async def cmd_get_tasks(message: types.Message):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"""
    try:
        user_id = message.from_user.id
        response = requests.get(
            f"{TASK_SERVICE_URL}/tasks", params={"user_id": user_id}
        )

        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP-–æ—à–∏–±–∫–∏

        tasks_data = response.json()

        now = datetime.now(tz=MOSCOW_TZ)
        overdue_count = 0  # –°—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á

        logging.exception(f"\n\n{tasks_data}\n\n")

        if tasks_data:
            task_list = []  # –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å –∑–∞–¥–∞—á–∞–º–∏
            for task in tasks_data:
                task_id = task.get("id", "N/A")
                title = task.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                description = task.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
                isCompleted = task.get("completed", False)

                deadline = datetime.fromisoformat(task["deadline"]).astimezone(
                    MOSCOW_TZ
                )
                deadline_str = deadline.strftime("%Y-%m-%d %H:%M")
                if isCompleted:
                    time_left = "üéâ –í—ã–ø–æ–ª–Ω–µ–Ω–æ, –¥–µ–¥–ª–∞–π–Ω —É–∂–µ –Ω–µ –≤–∞–∂–µ–Ω ;)"
                elif deadline < now:
                    overdue_count += 1
                    time_left = "‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"
                else:
                    days_left = int((deadline - now).total_seconds() // 86400)
                    hours_left = int(((deadline - now).total_seconds() % 86400) // 3600)
                    time_left = f"–û—Å—Ç–∞–ª–æ—Å—å: {days_left} –¥. {hours_left} —á."

                if task.get("notification") is None:
                    notification_time = "–ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
                else:
                    notification_time = datetime.fromisoformat(task.get("notification"))
                status = "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" if isCompleted else "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"

                task_info = (
                    f"üÜî {task_id} | \nüìå {title}\n"
                    f"üìÑ {description}\n"
                    f"‚è≥ {deadline_str}\n"
                    f"‚è± {time_left}\n"
                    f"üîî {notification_time}\n"
                    f"‚úÖ {status}"
                )

                task_list.append(task_info)
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
            deadline_summary = (
                f"‚ùóÔ∏è–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {overdue_count}.\n\n"
                if overdue_count > 0
                else ""
            )
            final_message = deadline_summary + "\n\n".join(task_list)
            await message.answer(final_message)
        else:
            await message.answer("‚úÖ –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!")

    except requests.exceptions.RequestException as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
        logging.error(f"–û—à–∏–±–∫–∞: {e}")


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
class TaskForm(StatesGroup):
    title = State()  # –û–∂–∏–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    user_id = State()  # –û–∂–∏–¥–∞–µ–º user_id
    deadline = State()  # –û–∂–∏–¥–∞–µ–º –¥–µ–¥–ª–∞–π–Ω
    description = State()  # –û–∂–∏–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏


@router.message(Command("add_task"))
async def cmd_add_task(message: types.Message, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"""
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add_task task_title deadline (YYYY-MM-DD HH:MM)"
        )
        return

    ans = args[1]
    parts = ans.rsplit(maxsplit=2)
    if len(parts) < 3:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add_task task_title deadline (YYYY-MM-DD HH:MM)"
        )
        return

    task_title, task_deadline = parts[0], parts[1] + " " + parts[2]
    try:
        task_deadline = datetime.strptime(task_deadline, "%Y-%m-%d %H:%M")
        task_deadline = MOSCOW_TZ.localize(task_deadline).astimezone(pytz.UTC)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: YYYY-MM-DD HH:MM")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –¥–µ–¥–ª–∞–π–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        title=task_title, deadline=task_deadline, user_id=message.from_user.id
    )

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø–∏—Å–∞–Ω–∏–µ
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    await state.set_state(TaskForm.description)  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
@router.message(TaskForm.description)
async def process_description(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ API"""
    task_description = message.text.strip()

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_data = await state.get_data()
    task_title = user_data["title"]
    task_deadline = user_data["deadline"]

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ API
    task_data = {
        "title": task_title,
        "user_id": user_data["user_id"],
        "description": task_description,
        "deadline": task_deadline.isoformat(),
        "completed": False,
    }

    try:
        response = requests.post(f"{TASK_SERVICE_URL}/tasks", json=task_data)
        if response.status_code == 200:
            await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ '{task_title}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


@router.message(Command("delete_task"))
async def cmd_delete_task(message: types.Message):
    """–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ ID"""
    try:
        task_id = message.text.removeprefix("/delete_task ").strip()
        response = requests.delete(f"{TASK_SERVICE_URL}/tasks/{task_id}")
        if response.status_code == 200:
            await message.answer(f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} —É–¥–∞–ª–µ–Ω–∞.")
        else:
            await message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–æ–≥–æ ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
            )
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ ID –∑–∞–¥–∞—á–∏.")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
        logging.error(e)


class UpdateTaskForm(StatesGroup):
    task_id = State()  # ID –∑–∞–¥–∞—á–∏
    field = State()  # –í—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª–µ
    new_value = State()  # –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ


@router.message(Command("update_task"))
async def cmd_update_task(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å ID –∑–∞–¥–∞—á–∏"""
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /update_task task_id")
        return

    task_id = args[1]

    await state.update_data(task_id=task_id)

    # –°–æ–∑–¥–∞—ë–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤—ã–±–æ—Ä–∞
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="title")],
            [types.InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data="description")],
            [types.InlineKeyboardButton(text="–î–µ–¥–ª–∞–π–Ω", callback_data="deadline")],
            [types.InlineKeyboardButton(text="–°—Ç–∞—Ç—É—Å", callback_data="completed")],
        ]
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=keyboard)
    await state.set_state(UpdateTaskForm.field)


@router.callback_query(UpdateTaskForm.field)
async def process_field_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è"""
    selected_field = callback.data

    await state.update_data(field=selected_field)

    if selected_field == "completed":
        user_data = await state.get_data()
        task_id = user_data["task_id"]
        response = requests.get(f"{TASK_SERVICE_URL}/tasks/{task_id}")
        if response.status_code != 200:
            callback.message.answer(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á (completed status getting error)"
            )
            return
        task = response.json()
        new_value = not task["completed"]
        update_data = {selected_field: new_value}
        try:
            response = requests.put(
                f"{TASK_SERVICE_URL}/tasks/{task_id}", json=update_data
            )
            if response.status_code == 200:
                await callback.message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            else:
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
        except Exception as e:
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

        await state.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    else:
        await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {selected_field}:")
        await state.set_state(UpdateTaskForm.new_value)
    await callback.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É


@router.message(UpdateTaskForm.new_value)
async def process_new_value(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    user_data = await state.get_data()
    task_id = user_data["task_id"]
    field = user_data["field"]
    new_value = message.text.strip()
    if field == "deadline":
        try:
            new_value = datetime.strptime(new_value, "%Y-%m-%d %H:%M")

            new_value = MOSCOW_TZ.localize(new_value).astimezone(pytz.UTC).isoformat()
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: YYYY-MM-DD HH:MM")
            return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    update_data = {field: new_value}

    try:
        response = requests.put(f"{TASK_SERVICE_URL}/tasks/{task_id}", json=update_data)
        if response.status_code == 200:
            await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    await state.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è


def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥."""
    dp.include_router(router)


@router.message(Command("delete_tasks_by_deadline"))
async def delete_task_by_deadline(message: types.Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –¥–µ–¥–ª–∞–π–Ω—É."""
    user_id = message.from_user.id
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /delete_tasks_by_deadline deadline (YYYY-MM-DD)"
        )
        return
    ans = args[1]
    parts = ans.rsplit(maxsplit=2)
    if len(parts) != 1:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /delete_tasks_by_deadline deadline (YYYY-MM-DD)"
        )
        return
    try:
        deadline_str = parts[0]
        resp = requests.delete(
            f"{TASK_SERVICE_URL}/tasks",
            params={"user_id": user_id, "deadline_time": deadline_str},
        )
        if resp.status_code == 200:
            await message.reply(f"–ó–∞–¥–∞—á–∏ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º –≤ {deadline_str} —É–¥–∞–ª–µ–Ω—ã.")
        elif resp.status_code == 404:
            await message.reply("–ó–∞–¥–∞—á —Å —Ç–∞–∫–∏–º –¥–µ–¥–ª–∞–π–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.")
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
        logging.error(e)


@router.message(Command("add_notification"))
async def add_notification(message: types.Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add_notification task_id date (YYYY-MM-DD HH:MM)"
        )
        return
    ans = args[1]
    parts = ans.rsplit(maxsplit=2)
    if len(parts) != 3:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add_notification task_id date (YYYY-MM-DD HH:MM)"
        )
        return
    task_id, task_deadline = parts[0], parts[1] + " " + parts[2]
    tasks = requests.get(
        f"{TASK_SERVICE_URL}/tasks/{task_id}", params={"task_id": task_id}
    )
    logging.exception(f"\n\n{tasks.json()}\n\n")
    if len(tasks.json()) == 0:
        await message.reply("–ó–∞–¥–∞—á —Å —Ç–∞–∫–∏–º Id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    task = tasks.json()
    logging.exception(f"\n\n{task}\n\n")
    logging.exception(f"\n\n{'notification' in task}\n\n")
    if task.get("notification") is not None:
        await message.reply("–£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏.")
        return
    logging.exception(f"\n\n{tasks}\n\n")
    try:
        try:
            task_deadline = datetime.strptime(task_deadline, "%Y-%m-%d %H:%M")
            task_deadline = (
                MOSCOW_TZ.localize(task_deadline).astimezone(pytz.UTC).isoformat()
            )
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: YYYY-MM-DD HH:MM")
            return

        resp = requests.post(
            f"{TASK_SERVICE_URL}/notification_reminder",
            params={
                "task_id": task_id,
                "user_id": user_id,
                "title": task["title"],
                "date": task_deadline,
            },
        )
        logging.exception(f"\n\n{resp}\n\n")
        if resp.status_code == 200:
            await message.reply(
                f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –∑–∞–¥–∞—á–µ "{task["title"]}" –≤ {task_deadline} –¥–æ–±–∞–≤–ª–µ–Ω–æ.'
            )
        elif resp.status_code == 404:
            await message.reply("–ó–∞–¥–∞—á —Å —Ç–∞–∫–∏–º Id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        logging.error(e)


@router.message(Command("delete_notification"))
async def delete_notification(message: types.Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /delete_notification task_id")
        return
    ans = args[1]
    parts = ans.rsplit(maxsplit=2)
    if len(parts) != 1:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add_notification task_id")
        return
    task_id = parts[0]
    tasks = requests.get(
        f"{TASK_SERVICE_URL}/tasks/{task_id}", params={"task_id": task_id}
    )
    logging.exception(f"\n\n{tasks.json()}\n\n")
    if len(tasks.json()) == 0:
        await message.reply("–ó–∞–¥–∞—á —Å —Ç–∞–∫–∏–º Id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    task = tasks.json()
    logging.exception(f"\n\n{task}\n\n")
    if task["notification"] == "None":
        await message.reply("–£ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        return
    logging.exception(f"\n\n{tasks}\n\n")
    try:
        resp = requests.post(
            f"{TASK_SERVICE_URL}/delete_notification_reminder",
            params={
                "task_id": task_id,
            },
        )
        logging.exception(f"\n\n{resp}\n\n")
        if resp.status_code == 200:
            await message.reply(
                f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –∑–∞–¥–∞—á–µ "{task["title"]}" –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.'
            )
        elif resp.status_code == 404:
            await message.reply("–ó–∞–¥–∞—á —Å —Ç–∞–∫–∏–º Id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        logging.error(e)
