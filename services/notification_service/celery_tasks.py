import os

import requests
from celery import Celery
from config import (REDIS_URL, TASK_SERVICE_URL,
                    TELEGRAM_API_TO_SEND_MESSAGE_URL)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Celery
celery_app = Celery(
    " ",
    broker=REDIS_URL,
)


@celery_app.task
def send_overdue_deadline_reminder(user_id: str, task_id: str, title: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram API"""

    extend_task_response = requests.post(
        f"{TASK_SERVICE_URL}/extend_task/{task_id}", params={"day_count": 1}
    )
    if extend_task_response.status_code != 200:
        raise Exception("–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–∞ –∑–∞–¥–∞—á–∏")
        return

    text = f'üîî –î–µ–¥–ª–∞–π–Ω –ø–æ –∑–∞–¥–∞—á–µ "{title}" –ø–æ–¥–æ—à–µ–ª –∫ –∫–æ–Ω—Ü—É! –ü—Ä–æ–ª–æ–Ω–≥–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ 1 –¥–µ–Ω—å'
    payload = {"chat_id": user_id, "text": text}
    try:
        response = requests.post(TELEGRAM_API_TO_SEND_MESSAGE_URL, json=payload)
        response.raise_for_status()
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ Telegram: {e}")


@celery_app.task
def send_notification_reminder(user_id: str, title: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞—Ö–æ—Ç–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""

    text = f'üîî –í—ã –ø—Ä–æ—Å–∏–ª–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ —É –≤–∞—Å —Å–∫–æ—Ä–æ –¥–µ–¥–ª–∞–π–Ω –ø–æ –∑–∞–¥–∞—á–µ "{title}"!!!'
    payload = {"chat_id": user_id, "text": text}
    try:
        response = requests.post(TELEGRAM_API_TO_SEND_MESSAGE_URL, json=payload)
        response.raise_for_status()
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ Telegram: {e}")
